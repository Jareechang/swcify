{"version":3,"sources":["index.js"],"names":["path","require","loadBinding","nativeBindings","join","__dirname","transform","src","options","isModule","jsc","parser","syntax","JSON","stringify","toBuffer","transformSync","raw","Buffer","from","module","exports"],"mappings":";;AAAA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAkBD,OAAO,CAAC,iBAAD,CAA/B,C,CAEA;AACA;;;AACA,MAAME,cAAc,GAAGD,WAAW,CAChCF,IAAI,CAACI,IAAL,CAAUC,SAAV,EAAqB,QAArB,CADgC,EAEhC,QAFgC,EAGhC,QAHgC,CAAlC;;AAMA,eAAeC,SAAf,CAAyBC,GAAzB,EAA8BC,OAAO,GAAG,EAAxC,EAA4C;AAAA;;AAC1C,QAAMC,QAAQ,GAAG,OAAOF,GAAP,KAAe,QAAhC;;AAEA,MAAIC,OAAJ,aAAIA,OAAJ,+BAAIA,OAAO,CAAEE,GAAb,yCAAI,aAAcC,MAAlB,EAA0B;AAAA;;AACxBH,IAAAA,OAAO,CAACE,GAAR,CAAYC,MAAZ,CAAmBC,MAAnB,4BAA4BJ,OAAO,CAACE,GAAR,CAAYC,MAAZ,CAAmBC,MAA/C,yEAAyD,YAAzD;AACD;;AAED,SAAOT,cAAc,CAACG,SAAf,CACLG,QAAQ,GAAGI,IAAI,CAACC,SAAL,CAAeP,GAAf,CAAH,GAAyBA,GAD5B,EAELE,QAFK,EAGLM,QAAQ,CAACP,OAAD,CAHH,CAAP;AAKD;;AAED,SAASQ,aAAT,CAAuBT,GAAvB,EAA4BC,OAAO,GAAG,EAAtC,EAA0C;AAAA;;AACxC,QAAMC,QAAQ,GAAG,OAAOF,GAAP,KAAe,QAAhC;;AAEA,MAAIC,OAAJ,aAAIA,OAAJ,gCAAIA,OAAO,CAAEE,GAAb,0CAAI,cAAcC,MAAlB,EAA0B;AAAA;;AACxBH,IAAAA,OAAO,CAACE,GAAR,CAAYC,MAAZ,CAAmBC,MAAnB,6BAA4BJ,OAAO,CAACE,GAAR,CAAYC,MAAZ,CAAmBC,MAA/C,2EAAyD,YAAzD;AACD;;AAED,SAAOT,cAAc,CAACa,aAAf,CACLP,QAAQ,GAAGI,IAAI,CAACC,SAAL,CAAeP,GAAf,CAAH,GAAyBA,GAD5B,EAELE,QAFK,EAGLM,QAAQ,CAACP,OAAD,CAHH,CAAP;AAKD;;AAED,SAASO,QAAT,CAAkBE,GAAlB,EAAuB;AACrB,SAAOC,MAAM,CAACC,IAAP,CAAYN,IAAI,CAACC,SAAL,CAAeG,GAAf,CAAZ,CAAP;AACD;;AAEDG,MAAM,CAACC,OAAP,CAAef,SAAf,GAA2BA,SAA3B;AACAc,MAAM,CAACC,OAAP,CAAeL,aAAf,GAA+BA,aAA/B","sourcesContent":["const path = require(\"path\");\nconst { loadBinding } = require(\"@node-rs/helper\");\n\n// grabs the appropriate native code for our platform\n// (\"swcify\" is the name defined in package.json)\nconst nativeBindings = loadBinding(\n  path.join(__dirname, \"native\"),\n  \"swcify\",\n  \"swcify\"\n);\n\nasync function transform(src, options = {}) {\n  const isModule = typeof src !== \"string\";\n\n  if (options?.jsc?.parser) {\n    options.jsc.parser.syntax = options.jsc.parser.syntax ?? \"ecmascript\";\n  }\n\n  return nativeBindings.transform(\n    isModule ? JSON.stringify(src) : src,\n    isModule,\n    toBuffer(options)\n  );\n}\n\nfunction transformSync(src, options = {}) {\n  const isModule = typeof src !== \"string\";\n\n  if (options?.jsc?.parser) {\n    options.jsc.parser.syntax = options.jsc.parser.syntax ?? \"ecmascript\";\n  }\n\n  return nativeBindings.transformSync(\n    isModule ? JSON.stringify(src) : src,\n    isModule,\n    toBuffer(options)\n  );\n}\n\nfunction toBuffer(raw) {\n  return Buffer.from(JSON.stringify(raw));\n}\n\nmodule.exports.transform = transform;\nmodule.exports.transformSync = transformSync;\n"]}